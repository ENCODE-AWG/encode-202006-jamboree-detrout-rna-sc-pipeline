* Jamboree

This is a VM for the June 2020 ENCODE jamboree. I should remember to grab my
notes out before they shut the VM down.

I am working on trying to figure out a single cell RNA-seq pipepline

Notes I'm sharing with other people are in this google doc
https://docs.google.com/document/d/1ZFPmoHS7Ce_8mgPfNMo620wkq47HRhU2wp57_HwH4TU/edit#

* Ali

pick a pipeline that also works with
split-bio & dd-seq
Liz has split-bio c2c12 data

* Updates to jamboree environment.

I installed msmtp and configured an account on chaos so I can send
myself email when jobs finish running.

I set up file:~/.msmtprc with a temporary account and created a small
script to send myself an email

#+begin_example
#!/bin/bash

printf "From: diane@ghic.org\nTo: diane@caltech.edu\nSubject: $1\n\n$2\n" | msmtp -t
#+end_example

* Data

In the google doc it looks like our best dataset shared among all
technologies is the e10.5 timepoint

* Cellranger

One comparison that needs to be done is to run cellranger with a newer
annotation set.

** Download cell ranger

I filled out their license agreement and downloaded the current
version of cellranger. The ticket will probably be expired anytime
anyone else looks at this.

#+begin_src bash
curl -o cellranger-3.1.0.tar.gz "http://cf.10xgenomics.com/releases/cell-exp/cellranger-3.1.0.tar.gz?Expires=1591692955&Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cDovL2NmLjEweGdlbm9taWNzLmNvbS9yZWxlYXNlcy9jZWxsLWV4cC9jZWxscmFuZ2VyLTMuMS4wLnRhci5neiIsIkNvbmRpdGlvbiI6eyJEYXRlTGVzc1RoYW4iOnsiQVdTOkVwb2NoVGltZSI6MTU5MTY5Mjk1NX19fV19&Signature=kVpABUeGN2MZPTfGXzFoWyVjIKeRUXbBBYKGMsa5eNeT3iSF50Dy5cB7fmbXfI2E8yjObDAI1KTXa3KYsD3WkcxI~SfmN8A6vCYfkTl4XutcdIhdCWdXU2ywbjoijbaMyhOjYXtU5ZzUD7v4-Kz1WMtczUs8hAfFu~QYmlNyey~9JNTQxBQ8EhY02pQziQrvHzJzbEw88282Sklltg8eQDCx~dxTXxFIVBYyMNqzMhOdI4MQa66lmnQ6d-YUT5M4aj5JxtCVjkJVbeCjCXkHHQh0fjhMgy6t-BNdzIhq6yfXici0bdjw26GZxy6w0YwWFGVuaB-VyDyPkTnrHxI9Cg__&Key-Pair-Id=APKAI7S6A5RYOXBWRPDA"
#+end_src

** Build new cell ranger index

#+begin_src bash
mkdir ~/proj/mm10-M21-male
cd ~/proj/mm10-M21-male
curl -L -O http://woldlab.caltech.edu/~diane/genome/mm10-M21-male/mm10-M21-ercc+phix.fa
curl -L -O http://woldlab.caltech.edu/~diane/genome/mm10-M21-male/gencode.vM21-tRNAs-ERCC.gff
./build-cellranger.sh ; ~/bin/notify.sh "finished" "finished"
#+end_src

** Download data

#+begin_src bash
TARGET=ENCSR874BOF_e10_5_limb
if [ ! -e ${TARGET} ] ; then mkdir ${TARGET} ; fi
pushd ${TARGET}
curl -L -o ENCFF294PZE_R1.fastq.gz https://www.encodeproject.org/files/ENCFF294PZE/@@download/ENCFF294PZE.fastq.gz
curl -L -o ENCFF111ISS_R2.fastq.gz https://www.encodeproject.org/files/ENCFF111ISS/@@download/ENCFF111ISS.fastq.gz
mv ENCFF294PZE_R1.fastq.gz ENCSR874BOF_S1_L001_R1_001.fastq.gz
mv ENCFF111ISS_R2.fastq.gz ENCSR874BOF_S1_L001_R2_001.fastq.gz
popd
#+end_src

** Run cell ranger

[[file:proj/ENCSR874BOF-10x-10.5-limb/run-cellranger.sh]]

#+begin_src bash
cd ~/proj/ENCSR874BOF_e10_5_limb
./run-cellranger.sh ; ~/bin/notify.sh "cellranger count finished" "CR finished"
#+end_src

real    922m34.656s
user    5206m31.687s
sys     385m19.170s

Results stored in
https://www.synapse.org/#!Synapse:syn22150185

Minimimum genes detected
fraction mitochondria

* Kallisto

** Download

ENCODE is using 0.44.0 but the newer versions did some work on bus
tools so try that one
https://github.com/pachterlab/kallisto/releases/download/v0.44.0/kallisto_linux-v0.44.0.tar.gz
Latest version is: 0.46.2
https://github.com/pachterlab/kallisto/releases/download/v0.46.2/kallisto_linux-v0.46.2.tar.gz

** Build 0.46.2 index

We need the transcriptome file. RSEM has a copy laying around in it.

ENCFF363TFV is the bulk ENCODE rsem index.

#+begin_src bash
push genome
curl -L -O https://www.encodeproject.org/files/ENCFF363TFV/@@download/ENCFF363TFV.tar.gz
pushd mm10-M21-male
tar xavf ../ENCFF363TFV.tar.gz --strip=1
#+end_src

#+begin_src bash
time ~/kallisto_linux-v0.46.2/kallisto index -i mm10-M21-male-kallisto-0.46.2.idx rsem.transcripts.fa ; ~/bin/notify.sh "kallisto finished" "inde
xing done"
#+end_src

#+RESULTS:
| [build] loading fasta file rsem.transcripts.fa                                  |
| [build] k-mer length: 31                                                        |
| [build] warning: clipped off poly-A tail (longer than 10)                       |
| from 837 target sequences                                                       |
| [build] warning: replaced 5619 non-ACGUT characters in the input sequence       |
| with pseudorandom nucleotides                                                   |
| [build] counting k-mers ... done.                                               |
| [build] building target de Bruijn graph ...  done                               |
| [build] creating equivalence classes ...  done                                  |
| [build] target de Bruijn graph has 904564 contigs and contains 120997101 k-mers |
|                                                                                 |
| real    10m55.235s                                                              |
| user    8m35.672s                                                               |
| sys     0m18.461s                                                               |

** Rebuild index on galvar

#+begin_src bash
GENOME_DIR=~/proj/genome
ENCODE_GENOME=~/proj/encode-202006-jamboree-detrout-rna-sc-pipeline/genome/mm10-M21-male
time ~/proj/kallisto/build/src/kallisto index \
  -i ${ENCODE_GENOME}/mm10-M21-male-kallisto-0.46.2.idx \
  ${GENOME_DIR}/mm10-M21-male/rsem.transcripts.fa
#+end_src

** Count

First build the bus file
#+begin_src bash
time ~/kallisto_linux-v0.46.2/kallisto bus \
    -t 32 \
    -i ~/proj/genome/mm10-M21-male/mm10-M21-male-kallisto-0.46.2.idx \
    -o mm10-M21-male-kallisto-0.46.2 \
    -x 10xv2 \
    ENCSR874BOF_S1_L001_R1_001.fastq.gz ENCSR874BOF_S1_L001_R2_001.fastq.gz
#+end_src

#+RESULTS:
| [index] k-mer length: 31                                             |
| [index] number of targets: 168,207                                   |
| [index] number of k-mers: 120,997,101                                |
| [index] number of equivalence classes: 555,826                       |
| [quant] will process sample 1: ENCSR874BOF_S1_L001_R1_001.fastq.gz   |
| ENCSR874BOF_S1_L001_R2_001.fastq.gz                                  |
| [quant] finding pseudoalignments for the reads ... done              |
| [quant] processed 432,950,142 reads, 359,437,471 reads pseudoaligned |
|                                                                      |
|                                                                      |
| real    42m14.986s                                                   |
| user    191m37.795s                                                  |
| sys     2m13.412s                                                    |

Downloaded
Bustools

https://github.com/BUStools/bustools/releases/download/v0.39.3/bustools_linux-v0.39.3.tar.gz

Following hints from
https://www.kallistobus.tools/getting_started_explained.html

Download 10xv2 whitelist
curl -L -O https://github.com/bustools/getting_started/releases/download/getting_started/10xv2_whitelist.txt

#+begin_src bash

curl -L -O https://github.com/BUStools/getting_started/releases/download/getting_started/t2g.py

cat ~/proj/genome/mm10-M21-male/gencode.vM21-tRNAs-ERCC.gff | python3 ~/bustools_linux-v0.39.3t2g.py  > ~/proj/genome/mm10-M21-male/mm10-M21-male-t2g.txt

#+end_src


time ~/bustools_linux-v0.39.3/bustools correct -w ~/proj/genome/10xv2_whitelist.txt -o output.correct.bus output.bus
Found 737280 barcodes in the whitelist
Number of hamming dist 1 barcodes = 20550336
Processed 359437471 bus records
In whitelist = 342274396
Corrected = 5260521
Uncorrected = 11902554

real    2m59.417s
user    1m10.048s
sys     0m17.139s

time ~/bustools_linux-v0.39.3/bustools sort -t 32 -o output.correct.sort.bus  output.correct.bus
Read in 347534917 BUS records

real    5m11.484s
user    1m33.653s
sys     0m29.536s

(base) diane@ip-172-31-30-226:~/proj/ENCSR874BOF_e10_5_limb/mm10-M21-male-kallisto-0.46.2$ time ~/bustools_linux-v0.39.3/bustools count -o eqcount/tcc -g ~/proj/genome/mm10-M21-male/mm10-M21-male-t2g.txt -e matrix.ec -t transcripts.txt output.correct.sort.bus 

real    0m32.146s
user    0m20.013s
sys     0m3.980s
(base) diane@ip-172-31-30-226:~/proj/ENCSR874BOF_e10_5_limb/mm10-M21-male-kallisto-0.46.2$ time ~/bustools_linux-v0.39.3/bustools count -o genecount/gene -g ~/proj/genome/mm10-M21-male/mm10-M21-male-t2g.txt -e matrix.ec -t transcripts.txt --genecounts output.correct.sort.bus 

real    0m10.240s
user    0m8.063s
sys     0m1.697s

** Count try 2

The above run didn't generate many results, I wonder if the order of
the fastq confused it.

#+begin_src bash
time ~/kallisto_linux-v0.46.2/kallisto bus \
    -t 32 \
    -i ~/proj/genome/mm10-M21-male/mm10-M21-male-kallisto-0.46.2.idx \
    -o mm10-M21-male-kallisto-0.46.2-reverse \
    -x 10xv2 \
    ENCSR874BOF_S1_L001_R2_001.fastq.gz ENCSR874BOF_S1_L001_R1_001.fastq.gz
#+end_src

#+RESULTS:
| [index] k-mer length: 31                                            |
| [index] number of targets: 168,207                                  |
| [index] number of k-mers: 120,997,101                               |
| [index] number of equivalence classes: 555,826                      |
| [quant] will process sample 1: ENCSR874BOF_S1_L001_R2_001.fastq.gz  |
| ENCSR874BOF_S1_L001_R1_001.fastq.gz                                 |
| [quant] finding pseudoalignments for the reads ... done             |
| [quant] processed 432,950,142 reads, 31,470,855 reads pseudoaligned |
|                                                                     |
|                                                                     |
| real    38m52.357s                                                  |
| user    417m4.345s                                                  |
| sys     4m24.291s                                                   |
|                                                                     |
|                                                                     |

time ~/bustools_linux-v0.39.3/bustools correct -w ~/proj/genome/10xv2_whitelist.txt -o output.correct.bus output.bus
Found 737280 barcodes in the whitelist
Number of hamming dist 1 barcodes = 20550336
Processed 31470855 bus records
In whitelist = 5755
Corrected = 141370
Uncorrected = 31323730

real    0m21.745s
user    0m18.491s
sys     0m1.825s

time ~/bustools_linux-v0.39.3/bustools sort -t 32 -o output.correct.sort.bus  output.correct.bus
Read in 147125 BUS records

real    0m2.247s
user    0m0.540s
sys     0m1.514s

time ~/bustools_linux-v0.39.3/bustools count -o eqcount/tcc -g ~/proj/genome/mm10-M21-male/mm10-M21-male-t2g.txt -e matrix.ec -t transcripts.txt output.correct.sort.bus 

real    0m2.294s
user    0m1.901s
sys     0m0.152s

time ~/bustools_linux-v0.39.3/bustools count -o genecount/gene -g ~/proj/genome/mm10-M21-male/mm10-M21-male-t2g.txt -e matrix.ec -t transcripts.txt --genecounts output.correct.sort.bus

real    0m1.519s
user    0m1.289s
sys     0m0.132s

** Try 3

does it work with kallisto provided index?


#+name: ENCSR874BOF_e10_5_limb/run-kallisto-upstream-idx.sh
#+begin_src bash
#!/bin/bash
time ~/kallisto_linux-v0.46.2/kallisto bus \
    -t 32 \
    -i ~/proj/genome/mus_musculus/transcriptome.idx \
    -o mm10-M21-male-kallisto-0.46.2-upstream-idx \
    -x 10xv2 \
    ENCSR874BOF_S1_L001_R1_001.fastq.gz ENCSR874BOF_S1_L001_R2_001.fastq.gz
cd mm10-M21-male-kallisto-0.46.2-upstream-idx
time ~/bustools_linux-v0.39.3/bustools correct -w ~/proj/genome/10xv2_whitelist.txt -o output.correct.bus output.bus
time ~/bustools_linux-v0.39.3/bustools sort -t 32 -o output.correct.sort.bus  output.correct.bus
mkdir eqcount genecount
time ~/bustools_linux-v0.39.3/bustools count -o eqcount/tcc -g ~/proj/genome/mm10-M21-male/mm10-M21-male-t2g.txt -e matrix.ec -t transcripts.txt output.correct.sort.bus 
time ~/bustools_linux-v0.39.3/bustools count -o genecount/gene -g ~/proj/genome/mm10-M21-male/mm10-M21-male-t2g.txt -e matrix.ec -t transcripts.txt --genecounts output.correct.sort.bus

#+end_src

** Quantify locally using kallisto

#+begin_src bash
GENOME_DIR=~/proj/genome
ENCODE_GENOME=~/proj/encode-202006-jamboree-detrout-rna-sc-pipeline/genome/mm10-M21-male
time ~/proj/kallisto/build/src/kallisto bus \
  -t 20 \
  -i ${ENCODE_GENOME}/mm10-M21-male-kallisto-0.46.2.idx \
  -o ENCSR874BOF_e10_5_limb/kallisto \
  -x 10xv2 \
  ENCSR874BOF_e10_5_limb/ENCSR874BOF_S1_L001_R1_001.fastq.gz \
  ENCSR874BOF_e10_5_limb/ENCSR874BOF_S1_L001_R2_001.fastq.gz
#+end_src

#+begin_src bash
BUS_DIR=~/proj/bustools/build/src
TARGET_DIR=ENCSR874BOF_e10_5_limb/kallisto
time ${BUS_DIR}/bustools correct \
  -w 10xv2_whitelist.txt \
  -o ${TARGET_DIR}/output.correct.bus \
  ${TARGET_DIR}/output.bus

mkdir ${TARGET_DIR}/{eqcount,genecount}

time ${BUS_DIR}/bustools sort \
  -t 20 \
  -o ${TARGET_DIR}/output.correct.sort.bus \
  ${TARGET_DIR}/output.correct.bus

time ${BUS_DIR}/bustools count \
  -o ${TARGET_DIR}/eqcount/tcc \
  -g ${ENCODE_GENOME}/txp2gene.tsv \
  -e ${TARGET_DIR}/matrix.ec \
  -t ${TARGET_DIR}/transcripts.txt \
  ${TARGET_DIR}/output.correct.sort.bus

time ${BUS_DIR}/bustools count \
  -o ${TARGET_DIR}/genecount/gene \
  -g ${ENCODE_GENOME}/txp2gene.tsv \
  -e ${TARGET_DIR}/matrix.ec \
  -t ${TARGET_DIR}/transcripts.txt \
  --genecounts ${TARGET_DIR}/output.correct.sort.bus

#+end_src

* Salmon/Alevin

Ben had originally tried to get Salmon/Alevin to run but it was
segfaulting on the AWG hosts.

Instead of salmon's prebuilt version, I'm going to use the version
built by Debian, the version in buster is 0.12.0+ds1-1, but I want the
version in unstable 1.2.1+ds1-1+b2.



Sounds like it's time for singularity.

#+begin_src bash
pushd salmon-container
sudo singularity build /tmp/salmon-unstable.simg salmon-unstable.def
cp /tmp/salmon-unstable.simg .
popd
#+end_src

#+begin_src bash
singularity run salmon-container/salmon-unstable.simg --version
#+end_src

#+RESULTS:
: salmon 1.2.1

** Building salmon reference from GENCOE

I'd suggested using the transcriptome file generated by RSEM, but
maybe that wasn't working correctly. I spent some time reading
Salmon's documentation and am going to try building an index based on
their recommendations. [[https://combine-lab.github.io/alevin-tutorial/2019/selective-alignment/][Downloading Reference]]

#+begin_src bash
pushd genome/mm10-M21-for-salmon
singularity run ../../salmon-container/salmon-unstable.simg --version
wget ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_mouse/release_M21/gencode.vM21.transcripts.fa.gz
wget ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_mouse/release_M21/GRCm38.primary_assembly.genome.fa.gz
grep "^>" <(gunzip -c GRCm38.primary_assembly.genome.fa.gz) | cut -d " " -f 1 > decoys.txt
sed -i.bak -e 's/>//g' decoys.txt
cat gencode.vM21.transcripts.fa.gz GRCm38.primary_assembly.genome.fa.gz > gentrome.fa.gz
singularity run ../../salmon-container/salmon-unstable.simg index -t gentrome.fa.gz -d decoys.txt -p 12 -i salmon_index --gencode
popd
#+end_src

That eventually finished.

** Building salmon reference from ENCODE files.

#+begin_src bash
GENOME_DIR=~/proj/genome/mm10-M21-male
pushd genome/mm10-M21-male
cat ${GENOME_DIR}/rsem.idx.fa ${GENOME_DIR}/mm10-M21-ercc+phix.fa | gzip -9 > mm10-M21-male-gentrome.gz
grep "^>" ${GENOME_DIR}/mm10-M21-ercc+phix.fa | cut -d " " -f 1 > decoys.txt
sed -i.bak -e 's/>//g' decoys.txt
singularity run ../../salmon-container/salmon-unstable.simg index \
  -t mm10-M21-male-gentrome.gz \
  -d decoys.txt \
  -p 16 \
  -i salmon_index
popd
#+end_src

** Make transcript to gene map

#+begin_src bash
pushd genome/mm10-M21-for-salmon
zgrep '>' gencode.vM21.transcripts.fa.gz | cut -c 2- | cut -d '|' -f 1,2 | tr '|' '\t' > txp2gene.tsv
popd
#+end_src

** Alevin 10x style alignment

It looks like they repurposed paired end sequencing to deal with
chromium reads.

https://salmon.readthedocs.io/en/latest/alevin.html#using-alevin

-1 argument is the paired reads that contains the CB+UMI fastq while
 -2 is the sequence.

#+begin_src bash
ANALYSIS_DIR=ENCSR874BOF_e10_5_limb
GENOME_DIR=genome/mm10-M21-for-salmon
SALMON=salmon-container/salmon-unstable.simg

time singularity run ${SALMON} alevin \
  -l ISR \
  -1 ${ANALYSIS_DIR}/ENCSR874BOF_S1_L001_R2_001.fastq.gz \
  -2 ${ANALYSIS_DIR}/ENCSR874BOF_S1_L001_R1_001.fastq.gz \
  --chromium \
  -i ${GENOME_DIR}/salmon_index \
  -p 16 \
  -o ${ANALYSIS_DIR}/alevin_output \
  --tgMap ${GENOME_DIR}/txp2gene.tsv
#+end_src

[2020-07-07 12:10:04.944] [alevinLog] [info] Total 21964.00 UMI after deduplicating.
[2020-07-07 12:10:04.944] [alevinLog] [info] Total 12764 BiDirected Edges.
[2020-07-07 12:10:04.944] [alevinLog] [info] Total 4536 UniDirected Edges.
On Galvar
real    60m47.402s
user    540m9.813s
sys     3m32.461s

#+begin_src bash
ANALYSIS_DIR=ENCSR874BOF_e10_5_limb
du -shc ${ANALYSIS_DIR}/alevin_output
#+end_src

#+RESULTS:
| 675K | ENCSR874BOF_e10_5_limb/alevin_output |
| 675K | total                                |

That doesn't seem like a real result, lets try swapping the fastqs.

#+begin_src bash
ANALYSIS_DIR=ENCSR874BOF_e10_5_limb
GENOME_DIR=genome/mm10-M21-for-salmon
SALMON=salmon-container/salmon-unstable.simg

time singularity run ${SALMON} alevin \
  -l ISR \
  -1 ${ANALYSIS_DIR}/ENCSR874BOF_S1_L001_R1_001.fastq.gz \
  -2 ${ANALYSIS_DIR}/ENCSR874BOF_S1_L001_R2_001.fastq.gz \
  --chromium \
  -i ${GENOME_DIR}/salmon_index \
  -p 16 \
  -o ${ANALYSIS_DIR}/alevin_output_R1_R2 \
  --tgMap ${GENOME_DIR}/txp2gene.tsv
#+end_src

[2020-07-07 14:11:13.233] [alevinLog] [info] Total 141537317.00 UMI after deduplicating.
[2020-07-07 14:11:13.233] [alevinLog] [info] Total 29915993 BiDirected Edges.
[2020-07-07 14:11:13.233] [alevinLog] [info] Total 1535489 UniDirected Edges.

real    91m53.868s
user    999m44.076s
sys     4m0.639s

#+begin_src bash
ANALYSIS_DIR=ENCSR874BOF_e10_5_limb
du -shc ${ANALYSIS_DIR}/alevin_output_R1_R2
#+end_src

#+RESULTS:
| 73M | ENCSR874BOF_e10_5_limb/alevin_output_R1_R2 |
| 73M | total                                      |

That looks much more promising.

Hm... but non-standard output file format.

so again.

#+begin_src bash
ANALYSIS_DIR=ENCSR874BOF_e10_5_limb
GENOME_DIR=genome/mm10-M21-for-salmon
SALMON=salmon-container/salmon-unstable.simg

time singularity run ${SALMON} alevin \
  -l ISR \
  -1 ${ANALYSIS_DIR}/ENCSR874BOF_S1_L001_R1_001.fastq.gz \
  -2 ${ANALYSIS_DIR}/ENCSR874BOF_S1_L001_R2_001.fastq.gz \
  --chromium \
  -i ${GENOME_DIR}/salmon_index \
  -p 16 \
  -o ${ANALYSIS_DIR}/alevin_output_R1_R2 \
  --dumpMtx \
  --tgMap ${GENOME_DIR}/txp2gene.tsv
#+end_src

*** third try, with encode annotation files

#+begin_src bash
ANALYSIS_DIR=ENCSR874BOF_e10_5_limb
GENOME_DIR=genome/mm10-M21-male
SALMON=salmon-container/salmon-unstable.simg

time singularity run ${SALMON} alevin \
  -l ISR \
  -1 ${ANALYSIS_DIR}/ENCSR874BOF_S1_L001_R1_001.fastq.gz \
  -2 ${ANALYSIS_DIR}/ENCSR874BOF_S1_L001_R2_001.fastq.gz \
  --chromium \
  -i ${GENOME_DIR}/salmon_index \
  -p 16 \
  -o ${ANALYSIS_DIR}/alevin_output_encode_R1_R2 \
  --dumpMtx \
  --tgMap ${GENOME_DIR}/txp2gene.tsv
#+end_src

** TODO we need to compare the spearmans & relative differences to the star values.


* How do tools handle multi-mapping reads?

Anshul thinks this is import

Important paperCompression of quantification
uncertainty for scRNA-seq counts
https://www.biorxiv.org/content/10.1101/2020.07.06.189639v1

Quantification estimates of gene expression from single-cell RNA-seq
(scRNA-seq) data have inherent uncertainty due to reads that map to
multiple genes. Many existing scRNA-seq quantification pipelines
ignore multi-mapping reads and therefore underestimate expected read
counts for many genes. alevin accounts for multi-mapping reads and
allows for the generation of "inferential replicates", which reflect
quantification uncertainty. Previous methods have shown improved
performance when incorporating these replicates into statistical
analyses, but storage and use of these replicates increases
computation time and memory requirements. We demonstrate that storing
only the mean and variance from a set of inferential replicates
("compression") is sufficient to capture gene-level quantification
uncertainty. Using these values, we generate "pseudo-inferential"
replicates from a negative binomial distribution and propose a general
procedure for incorporating these replicates into a proposed
statistical testing framework. We show reduced false positives when
applying this procedure to trajectory-based differential expression
analyses. We additionally extend the Swish method to incorporate
pseudo-inferential replicates and demonstrate improvements in
computation time and memory consumption without any loss in
performance. Lastly, we show that the removal of multi-mapping reads
can result in significant underestimation of counts for functionally
important genes in a real dataset. makeInfReps and splitSwish are
implemented in the development branch of the R/Bioconductor fishpond
package available at
http://bioconductor.org/packages/devel/bioc/html/fishpond.html. Sample
code to calculate the uncertainty-aware p-values can be found on
GitHub at
https://github.com/skvanburen/scUncertaintyPaperCode. (edited)

** RSEM invented the use of an EM process to allocate multi-mapping reads
** Salmon/Alevin

** Does Kalisto handle multi-mapping reads?

From https://arxiv.org/pdf/1505.02710.pdf

While the direct use of k-mers is inadequate for accurate
quantification, the speed of hashing provides hope for much faster,
yet accurate, RNA-Seq processing. We therefore asked whether
information from k-mer within a read could be combined efficiently in
a manner that would maintain the accuracy of alignment-based
quantification. To address this question, we examined the central
difficulty and key requirement for accurate quantification, which is
the assignment of reads that cannot be uniquely aligned6. Typically,
these multi-mapping reads are accounted for using a statistical model
of RNA-Seq6 which probabilistically assigns such reads while inferring
maximum likelihood estimates of transcript abundances. However it has
been observed that the sufficient statistics for the simplest such
models are the compatibilities of reads with transcripts7. That is,
the necessary information is not whereinside transcripts the reads may
have originated from, but onlywhich transcripts could have generated
them. This led us to formulate the concept of pseudoalignment of reads
and fragments.

** Review paper

Handling multi-mapped reads in RNA-seq
Gabrielle Deschamps-Francoeur, Joël Simoneau, Michelle S.Scott
https://www.sciencedirect.com/science/article/pii/S2001037020303032
